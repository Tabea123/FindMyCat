% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Algorithm.R
\name{evolution}
\alias{evolution}
\title{Evolution of the Best Strategy}
\usage{
evolution(population_size, grid_size, n_evidence, steps, sessions,
generations)
}
\arguments{
\item{population_size}{a number indicating the amount of individuals in each
population.}

\item{grid_size}{a numeric vector of the form c(nrows, ncolumns)
which gives the size of the grid in x and y direction.}

\item{n_evidence}{a number specifing the amount of evidence in the grid.}

\item{steps}{a number indicating how many moves the robot should walk in one
grid configuration.}

\item{sessions}{a number indicating how many times the grid configuration is
changed in one life cycle.}

\item{generations}{a number indicating how many populations should be evolved.}
}
\value{
the individual with the highest score.
}
\description{
\code{evolution} is used to evolve the best strategy table.
}
\details{
\code{evolution} calls all subordinate functions.
First, the initial population of random strategies is generated with
\code{create_population}.
The fitness of each individual strategy is calculated with the function \code{life_cycle}.
Fitness is determined by seeing how well a strategy lets the robot do on X
different sessions. The number of \code{sessions} is determined
by the user. One session consists of putting the robot at his starting position
on a grid and then letting the robot move for X \code{steps}.
The score of the strategy in each session is the number of bonus- and minuspoints
the robot accumulates. The strategyâ€™s fitness is its average score over the
different sessions, each of which has a different grid configuration.
A grid is generated with the arguments \code{grid_size} and \code{n_evidence}.
The position of the evidence is randomly chosen.

With the function \code{next_generation} evolution is applied to the current
population to create a new population of strategies.
The two individuals from the current population with the highest scores are chosen
as the parents of the new generation. The two parents are mated to create offspring.
At a randomly chosen position the parental strategies are split. Offpring is
created by recombining the pieces of parental material. With a small probability,
mutations accur. Offspring is generated until the next population has the same
amount of individuals as the first generation.

This procedure is repeated for as many \code{generations} as the user indicates.
\code{evolution} returns the best strategy table.
}
\examples{
evolution(100, c(10, 10), 11, 100, 50, 1000)
}
